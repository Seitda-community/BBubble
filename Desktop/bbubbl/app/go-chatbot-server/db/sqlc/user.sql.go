// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const checkAccountExists = `-- name: CheckAccountExists :one
SELECT EXISTS(
        SELECT 1
        FROM users
        WHERE email = $1
    )
`

func (q *Queries) CheckAccountExists(ctx context.Context, email string) (bool, error) {
	row := q.queryRow(ctx, q.checkAccountExistsStmt, checkAccountExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
        platform,
        login_type,
        id_token,
        username,
        email,
        password_hash
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING user_id,
    platform,
    login_type,
    id_token,
    username,
    email,
    image_url,
    created_at,
    updated_at,
    last_login
`

type CreateUserParams struct {
	Platform     string         `json:"platform"`
	LoginType    string         `json:"login_type"`
	IDToken      sql.NullString `json:"id_token"`
	Username     string         `json:"username"`
	Email        string         `json:"email"`
	PasswordHash sql.NullString `json:"password_hash"`
}

type CreateUserRow struct {
	UserID    int32          `json:"user_id"`
	Platform  string         `json:"platform"`
	LoginType string         `json:"login_type"`
	IDToken   sql.NullString `json:"id_token"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	ImageUrl  sql.NullString `json:"image_url"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	LastLogin sql.NullTime   `json:"last_login"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Platform,
		arg.LoginType,
		arg.IDToken,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.UserID,
		&i.Platform,
		&i.LoginType,
		&i.IDToken,
		&i.Username,
		&i.Email,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id,
    platform,
    login_type,
    id_token,
    username,
    email,
    image_url,
    created_at,
    updated_at,
    last_login
FROM users
WHERE user_id = $1
LIMIT 1
`

type GetUserRow struct {
	UserID    int32          `json:"user_id"`
	Platform  string         `json:"platform"`
	LoginType string         `json:"login_type"`
	IDToken   sql.NullString `json:"id_token"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	ImageUrl  sql.NullString `json:"image_url"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	LastLogin sql.NullTime   `json:"last_login"`
}

func (q *Queries) GetUser(ctx context.Context, userID int32) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, userID)
	var i GetUserRow
	err := row.Scan(
		&i.UserID,
		&i.Platform,
		&i.LoginType,
		&i.IDToken,
		&i.Username,
		&i.Email,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, platform, login_type, id_token, username, email, password_hash, image_url, created_at, updated_at, last_login
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Platform,
		&i.LoginType,
		&i.IDToken,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserByGoogle = `-- name: GetUserByGoogle :one
SELECT user_id, platform, login_type, id_token, username, email, password_hash, image_url, created_at, updated_at, last_login
FROM users
WHERE email = $1
    AND id_token = $2
    AND login_type = $3
LIMIT 1
`

type GetUserByGoogleParams struct {
	Email     string         `json:"email"`
	IDToken   sql.NullString `json:"id_token"`
	LoginType string         `json:"login_type"`
}

func (q *Queries) GetUserByGoogle(ctx context.Context, arg GetUserByGoogleParams) (User, error) {
	row := q.queryRow(ctx, q.getUserByGoogleStmt, getUserByGoogle, arg.Email, arg.IDToken, arg.LoginType)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Platform,
		&i.LoginType,
		&i.IDToken,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id,
    platform,
    login_type,
    id_token,
    username,
    email,
    image_url,
    created_at,
    updated_at,
    last_login
FROM users
ORDER BY user_id
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUsersRow struct {
	UserID    int32          `json:"user_id"`
	Platform  string         `json:"platform"`
	LoginType string         `json:"login_type"`
	IDToken   sql.NullString `json:"id_token"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	ImageUrl  sql.NullString `json:"image_url"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	LastLogin sql.NullTime   `json:"last_login"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Platform,
			&i.LoginType,
			&i.IDToken,
			&i.Username,
			&i.Email,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE users
SET last_login = CURRENT_TIMESTAMP
WHERE user_id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, userID int32) error {
	_, err := q.exec(ctx, q.updateLastLoginStmt, updateLastLogin, userID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = COALESCE($2, username),
    email = COALESCE($3, email),
    image_url = COALESCE($4, image_url),
    updated_at = CURRENT_TIMESTAMP,
    last_login = COALESCE($5, last_login)
WHERE user_id = $1
RETURNING user_id,
    platform,
    login_type,
    id_token,
    username,
    email,
    image_url,
    created_at,
    updated_at,
    last_login
`

type UpdateUserParams struct {
	UserID    int32          `json:"user_id"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	ImageUrl  sql.NullString `json:"image_url"`
	LastLogin sql.NullTime   `json:"last_login"`
}

type UpdateUserRow struct {
	UserID    int32          `json:"user_id"`
	Platform  string         `json:"platform"`
	LoginType string         `json:"login_type"`
	IDToken   sql.NullString `json:"id_token"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	ImageUrl  sql.NullString `json:"image_url"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	LastLogin sql.NullTime   `json:"last_login"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.UserID,
		arg.Username,
		arg.Email,
		arg.ImageUrl,
		arg.LastLogin,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.UserID,
		&i.Platform,
		&i.LoginType,
		&i.IDToken,
		&i.Username,
		&i.Email,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}
